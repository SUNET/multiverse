#!/bin/bash
ip="${1}"
strict="${2}"
if [[ -z "${ip}" ]] || [[ "${ip}" == "--help" ]] || [[ "${ip}" == "-h" ]] || \
   [[ "${strict}" == "--help" ]] || [[ "${strict}" == "-h" ]]; then
    echo "Usage: ${0} <ip or hostname> [--help|-h] [--strict|-s]"
    echo "ip or hostname: a cloud image host that the script should do the following on:"
    echo "  #1 enable root-login"
    echo "  #2 remove the default user"
    echo "  #3 run apt-get update and dist-upgrade without interaction"
    echo "  #4 reboot to start using the new kernel, updated packages etc."
    echo "Options:"
    echo "  -h|--help show this help message"
    echo "  -s|--strict use StrictHostKeyChecking for ssh (default: off)"
    exit 1
fi

set -x

# Make sure we read the additional scripts from the same directory as
# this script is located at
script_dir=$(dirname "$0")

# Since this script is intended to run on newly installed machines,
# we should not worry about any TOFU databases, allready present
ssh-keygen -R "${ip}" &> /dev/null

ssh_strict_host_key_checking="StrictHostKeyChecking=off"

if [[ "${strict}" == "--strict" ]] || [[ "${strict}" == "-s" ]]; then
  ssh_strict_host_key_checking="StrictHostKeyChecking=on"
fi

# The reason for running two separate logins is that it is tricky to
# remove the initial user while logged in as that same user:
# ===
# userdel: user debian is currently used by process 1082
# ===
ssh "debian@${ip}" -o "${ssh_strict_host_key_checking}" "bash -s" < "$script_dir"/iaas-enable-root.sh
ssh "root@${ip}" "bash -s" < "$script_dir"/iaas-setup.sh
